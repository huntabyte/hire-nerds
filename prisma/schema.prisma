// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id String @id @default(uuid())

    firstName String? @map("first_name")
    lastName  String? @map("last_name")

    organization OrganizationUser?
    Job          Job[]

    resume    Resume?
    appliedTo JobApplication[]

    @@map("profiles")
}

model Resume {
    id         String             @id @default(uuid())
    user       Profile            @relation(fields: [userId], references: [id])
    userId     String             @unique @map("user_id")
    firstName  String             @map("first_name")
    lastName   String             @map("last_name")
    location   String
    education  ResumeEducation[]
    experience ResumeExperience[]
    skills     ResumeSkills[]
    appliedTo  JobApplication[]

    @@map("resumes")
}

model ResumeEducation {
    id                String   @id @default(uuid())
    resume            Resume   @relation(fields: [resumeId], references: [id])
    resumeId          String   @map("resume_id")
    educationLevel    String   @map("education_level")
    field             String   @map("field")
    school            String   @map("school")
    location          String   @map("location")
    currentlyEnrolled Boolean  @default(false) @map("currently_enrolled")
    enrolledFrom      DateTime @map("enrolled_from")
    enrolledTo        DateTime @map("enrolled_to")

    @@map("resume_educations")
}

model ResumeExperience {
    id                String    @id @default(uuid())
    resume            Resume?   @relation(fields: [resumeId], references: [id])
    resumeId          String?   @map("resume_id")
    jobTitle          String?   @map("job_title")
    company           String?   @map("company")
    location          String?   @map("location")
    currentlyEmployed Boolean?  @default(false) @map("currently_employed")
    employedFrom      DateTime? @map("employed_from")
    employedTo        DateTime? @map("employed_to")
    description       String?

    @@map("resume_experience")
}

model ResumeSkills {
    id String @id @default(uuid())

    resume   Resume? @relation(fields: [resumeId], references: [id])
    resumeId String? @map("resume_id")

    name String

    @@map("resume_skills")
}

model Organization {
    id String @id @default(uuid())

    name    String
    website String?

    organizationUsers OrganizationUser[]
    Job               Job[]

    @@map("organizations")
}

enum OrganizationRole {
    RECRUITER
    ADMIN
}

model OrganizationUser {
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @map("organization_id")

    user   Profile @relation(fields: [userId], references: [id])
    userId String  @unique @map("user_id")

    role OrganizationRole @default(RECRUITER)

    @@id([userId, organizationId])
    @@map("organizations_users")
}

enum JobType {
    FULL_TIME
    PART_TIME
    CONTRACT
}

enum JobLocType {
    REMOTE
    HYBRID
    OFFICE
}

enum CompensationType {
    SALARY
    HOURLY
}

model Job {
    id            String           @id @default(uuid())
    title         String
    type          JobType
    location      String
    compType      CompensationType @map("comp_type")
    payScaleBegin Int              @map("pay_scale_begin")
    payScaleEnd   Int              @map("pay_scale_end")
    description   String
    jobLocType    JobLocType       @map("job_location_type")

    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @map("organization_id")

    user         Profile          @relation(fields: [userId], references: [id])
    userId       String           @map("user_id")
    applications JobApplication[]

    @@map("jobs")
}

enum JobApplicationStatus {
    APPLIED
    WITHDRAWN
    INTERVIEWING
    HIRED
    CLOSED
}

model JobApplication {
    job   Job    @relation(fields: [jobId], references: [id])
    jobId String @map("job_id")

    user   Profile @relation(fields: [userId], references: [id])
    userId String  @map("user_id")

    status JobApplicationStatus @default(APPLIED)

    resume   Resume @relation(fields: [resumeId], references: [id])
    resumeId String @map("resume_id")

    @@id([userId, jobId])
    @@map("job_applications")
}
